--- Makefile
+++ Makefile	2001/06/20 09:32:33
@@ -11,9 +11,9 @@
 
 # Installation directories
 #
-INSTALL_BIN_DIR = /usr/local/bin
-INSTALL_MAN_DIR = /usr/local/man
-
+INSTALL_BIN_DIR = /usr/bin
+INSTALL_MAN_DIR = /usr/share/man
+DESTDIR=
 all: ziptool
 
 clean:
@@ -22,10 +22,12 @@
 install: all
 	chown root.root ziptool
 	chmod 4755 ziptool
-	cp ziptool $(INSTALL_BIN_DIR)
-	cd $(INSTALL_BIN_DIR); ln -sf ziptool jaztool
-	cp ziptool.1.gz $(INSTALL_MAN_DIR)/man1
-	cd $(INSTALL_MAN_DIR)/man1; ln -sf ziptool.1.gz jaztool.1.gz
+	mkdir -p ${DESTDIR}/$(INSTALL_BIN_DIR)
+	cp ziptool ${DESTDIR}/$(INSTALL_BIN_DIR)
+	 mkdir -p  ${DESTDIR}/$(INSTALL_MAN_DIR)/man1
+	cp ziptool.1.gz ${DESTDIR}/$(INSTALL_MAN_DIR)/man1/
+	cd ${DESTDIR}/$(INSTALL_BIN_DIR); ln -sf ziptool jaztool
+	cd ${DESTDIR}/$(INSTALL_MAN_DIR)/man1; ln -sf ziptool.1.gz jaztool.1.gz
 
 ziptool: ziptool.c
 	gcc $(CFLAGS) -I$(LINUX_SRC_DIR)/include -o ziptool ziptool.c
--- ziptool.c
+++ ziptool.c	2001/06/20 09:43:28
@@ -37,16 +37,42 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include <linux/fs.h>
 #include <linux/major.h>
 
 #include <scsi/scsi.h>
 #include <scsi/scsi_ioctl.h>
 
-
+#ifndef SCSI_REMOVAL_PREVENT
+#define SCSI_REMOVAL_PREVENT   1
+#endif
+#ifndef SCSI_REMOVAL_ALLOW
+#define SCSI_REMOVAL_ALLOW     0
+#endif
+ 
+#ifndef MAJOR
+#define MAJOR(dev)      ((dev)>>8)
+#endif
+#ifndef MINOR
+#define MINOR(dev)      ((dev) & 0xff)
+#endif
 #ifndef MNTTYPE_AUTO
 #define MNTTYPE_AUTO			"auto"
 #endif
+#ifndef MNTTYPE_PROC
+#define MNTTYPE_PROC                   "proc"
+#endif
+#ifndef MNTTYPE_PTS
+#define MNTTYPE_PTS                    "devpts"
+#endif
+#ifndef MNTTYPE_AUTOFS
+#define MNTTYPE_AUTOFS                 "autofs"
+#endif
+#ifndef MNTTYPE_SHM
+#define MNTTYPE_SHM                    "shm"
+#endif
+#ifndef MNTTYPE_NONE
+#define MNTTYPE_NONE                   "none"
+#endif
 #ifndef IOMEGA_GET_PROT_MODE		/* patched kernels know this */
 #define IOMEGA_GET_PROT_MODE		0x06
 #define IOMEGA_SET_PROT_MODE		0x0c
@@ -78,14 +104,15 @@
  */
 static char	*jaz_models[] =
 {
-	"iomega  jaz 1gb",
-	"iomega  jaz 2gb", //ams
+       "Iomega  JAZ 1GB",
+       "iomega  JAZ 2GB", // correct values
 	NULL
 };
 
 static char	*zip_models[] =
 {
 	"Iomega  ZIP 100",
+        "Iomega  ZIP 250", // new version
 	NULL
 };
 
@@ -175,27 +202,86 @@
 	char		**model;
 	char		scsi_signature[25];
 	int		i, jazipfd;
+        struct stat     st_dev, st_mnt;
+        struct mntent   *mnt;
 
-/* 
- * Check to see if It is mounted via /etc/mtab
- *   (chop chop, hack hack )
- *
+/*
+ * Get file info and check, if we have a raw SCSI disk. Conditions:
+ * -> Blockdevice
+ * -> Major is SCSI_DISK_MAJOR
+ * -> Minor is a multiple of 16 (or 0)
  */
-	if (! (mtab = fopen("/etc/mtab", "r") ) )
-	{
-		perror("Opening /etc/mtab");
-		exit(1);
-	}
+        if (stat (dev, &st_dev)) {
+                (void) fprintf (stderr, "%s: stat(%s) failed: %s.\n",
+                        progname, dev, strerror (errno));
+                return (-1);
+        }
+
+        if (!S_ISBLK (st_dev.st_mode)
+#if defined SCSI_DISK0_MAJOR
+        ||  MAJOR (st_dev.st_rdev) != SCSI_DISK0_MAJOR
+#else
+        ||  MAJOR (st_dev.st_rdev) != SCSI_DISK_MAJOR
+#endif
+        ||  MINOR (st_dev.st_rdev) % 16 != 0) {
+                (void) fprintf (stderr, "%s: %s (%02d/%02d) is no raw scsi device.\n",
+                        progname, dev, MAJOR (st_dev.st_rdev), MINOR (st_dev.st_rdev));
+                return (-1);
+        }
+
+
+
+/*
+ * Now check if any partition of this device is already mounted (this
+ * includes checking if the device is mounted under a different name).
+ */
+        if ((mtab = setmntent (MOUNTED, "r")) == NULL) {
+                (void) fprintf (stderr, "%s: can't open %s.\n",
+                        progname, MOUNTED);
+                return (-1);
+        }
+
+        while (mnt = getmntent (mtab)) {
+                if (!strcmp (mnt->mnt_type, MNTTYPE_NFS)
+                ||  !strcmp (mnt->mnt_type, MNTTYPE_PROC)
+                ||  !strcmp (mnt->mnt_type, MNTTYPE_AUTO)
+                ||  !strcmp (mnt->mnt_type, MNTTYPE_PTS)
+                ||  !strcmp (mnt->mnt_type, MNTTYPE_AUTOFS)
+                ||  !strcmp (mnt->mnt_type, MNTTYPE_SHM)
+                ||  !strcmp (mnt->mnt_type, MNTTYPE_NONE)
+                ||  !strcmp (mnt->mnt_type, MNTTYPE_IGNORE))
+                        continue;
+
+                if (stat (mnt->mnt_fsname, &st_mnt)) {
+                        (void) fprintf (stderr, "%s: stat(%s) failed: %s.\n",
+                                progname, mnt->mnt_fsname, strerror (errno));
+                        (void) endmntent (mtab);
+                        return (-1);
+                }
+
+
+                if (S_ISBLK (st_mnt.st_mode)) {
+#if defined SCSI_DISK0_MAJOR
+                        if (MAJOR (st_mnt.st_rdev) == SCSI_DISK0_MAJOR
+#else
+                        if (MAJOR (st_mnt.st_rdev) == SCSI_DISK_MAJOR
+#endif
+                        &&  MINOR (st_mnt.st_rdev) >= MINOR (st_dev.st_rdev)
+                        &&  MINOR (st_mnt.st_rdev) <= MINOR (st_dev.st_rdev) + 15) {
+                                (void) fprintf (stderr, "%s: %s%d (%02d/%02d) is "
+                                        "mounted on %s.\n", progname, dev,
+                                        MINOR (st_mnt.st_rdev) - MINOR (st_dev.st_rdev),
+                                        MAJOR (st_dev.st_rdev),  MINOR (st_dev.st_rdev),
+                                        mnt->mnt_dir);
+                                (void) endmntent (mtab);
+                                return (-1);
+                        }
+                }
+        }
+
+        (void) endmntent (mtab);
+
 
-	while ( ! feof(mtab) )
-	{
-		fgets(mounts, 254, mtab);
-		if( strstr(mounts, dev) )
-		{
-			mounted = 1;
-		}
-	}
-	fclose(mtab);
 	
 
 /*
